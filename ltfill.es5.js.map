{"version":3,"file":"ltfill.es5.js","sources":["ltfill.js"],"sourcesContent":["// polyfill list titles\nexport function observe(scope, rawtag) {\n\tconst tag = rawtag ? rawtag.toLowerCase() : 'x-lt';\n\n\t// polyfill existing list titles\n\t[].forEach.call(\n\t\tscope.getElementsByTagName(tag),\n\t\tpolyfillListTitle\n\t);\n\n\t// polyfill new list titles\n\t(new MutationObserver(\n\t\t(mutations) => mutations.forEach(\n\t\t\t(mutation) => {\n\t\t\t\t[].forEach.call(\n\t\t\t\t\tmutation.addedNodes,\n\t\t\t\t\t(node) => {\n\t\t\t\t\t\tif (tag === node.nodeName.toLowerCase()) {\n\t\t\t\t\t\t\tpolyfillListTitle(node);\n\t\t\t\t\t\t} else if (node.getElementsByTagName) {\n\t\t\t\t\t\t\t[].forEach.call(\n\t\t\t\t\t\t\t\tnode.getElementsByTagName(tag),\n\t\t\t\t\t\t\t\tpolyfillListTitle\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\t\t)\n\t)).observe(\n\t\tscope,\n\t\t{\n\t\t\tchildList: true,\n\t\t\tsubtree: true\n\t\t}\n\t);\n\n\t// polyfill a list title\n\tfunction polyfillListTitle(lt) {\n\t\tif (!lt.hasAttribute('aria-hidden')) {\n\t\t\tlt.setAttribute('aria-hidden', true);\n\t\t}\n\n\t\tconst parent = lt.parentNode;\n\n\t\tif (parent) {\n\t\t\t// if the parent is a list and does not already contain the aria-labelledby attribute\n\t\t\tif (/^(DL|MENU|OL|UL)$/.test(parent.nodeName) && !parent.hasAttribute('aria-labelledby')) {\n\t\t\t\tif (!lt.hasAttribute('id')) {\n\t\t\t\t\tlt.id = `__ltfill${ ++uuid }`;\n\t\t\t\t}\n\n\t\t\t\t// set aria-labelledby on the list title parent\n\t\t\t\tparent.setAttribute('aria-labelledby', lt.id);\n\n\t\t\t\t// save the list title parent as a property of the list title\n\t\t\t\tlt.__ltfillParent = parent;\n\t\t\t}\n\t\t} else if (lt.__ltfillParent) {\n\t\t\t// conditionally remove the aria-labelledby attribute on the list title parent\n\t\t\tlt.__ltfillParent.removeAttribute('aria-labelledby');\n\t\t}\n\t}\n\n}\n\n// style list titles\nexport function style(scope, rawtag, cssText) {\n\tconst tag = rawtag ? rawtag.toLowerCase() : 'x-lt';\n\n\tif (scope.querySelector('style#ltfill-style')) {\n\t\treturn;\n\t}\n\n\tconst ltstyle = document.createElement('style');\n\n\tltstyle.setAttribute('id', 'ltfill-style');\n\n\tltstyle.textContent = `${ tag }{${ cssText || 'display:block;font-weight:bold' }}`;\n\n\tscope.appendChild(ltstyle);\n}\n\n// list title unique id\nlet uuid = -1;\n"],"names":["observe","scope","rawtag","polyfillListTitle","lt","hasAttribute","setAttribute","parent","parentNode","test","nodeName","id","uuid","__ltfillParent","removeAttribute","tag","toLowerCase","forEach","call","getElementsByTagName","MutationObserver","mutations","mutation","addedNodes","node","style","cssText","querySelector","ltstyle","document","createElement","textContent","appendChild"],"mappings":"0BACA,SAAgBA,EAAQC,EAAOC,YAqCrBC,EAAkBC,GACrBA,EAAGC,aAAa,kBACjBC,aAAa,eAAe,OAG1BC,EAASH,EAAGI,WAEdD,EAEC,oBAAoBE,KAAKF,EAAOG,YAAcH,EAAOF,aAAa,qBAChED,EAAGC,aAAa,UACjBM,iBAAmBC,KAIhBN,aAAa,kBAAmBF,EAAGO,MAGvCE,eAAiBN,GAEXH,EAAGS,kBAEVA,eAAeC,gBAAgB,uBA1D9BC,EAAMb,EAASA,EAAOc,cAAgB,UAGzCC,QAAQC,KACVjB,EAAMkB,qBAAqBJ,GAC3BZ,OAIIiB,iBACJ,SAACC,UAAcA,EAAUJ,QACxB,SAACK,MACGL,QAAQC,KACVI,EAASC,WACT,SAACC,GACIT,IAAQS,EAAKd,SAASM,gBACPQ,GACRA,EAAKL,yBACZF,QAAQC,KACVM,EAAKL,qBAAqBJ,GAC1BZ,SAOJH,QACFC,cAEY,WACF,IAkCZ,SAAgBwB,EAAMxB,EAAOC,EAAQwB,OAC9BX,EAAMb,EAASA,EAAOc,cAAgB,WAExCf,EAAM0B,cAAc,2BAIlBC,EAAUC,SAASC,cAAc,WAE/BxB,aAAa,KAAM,kBAEnByB,YAAkBhB,OAASW,GAAW,wCAExCM,YAAYJ,IAInB,IAAIhB,GAAQ"}